enum ratingEnum { h, l, norating }
// We need to duplicate some message variables into server (S) and client (C) variables
message-structure:
    SRT: ratingEnum, CRT: ratingEnum, SD: ratingEnum, CD: ratingEnum,
    SID: location, CID: location,
    SP: location, SPB: bool,
    CP: location, CPB: bool
// The recursion rep X. ... {guard}X used in the paper is not supported in rcheck.
// We add P and PB to write an equivalent (supported) specification

agent Client 
    // We add xBot to track when xPartner is _|_ (undefined/bottom)
    local: rating: ratingEnum, xPartner: location, xBot: bool, demand: ratingEnum
    init: xBot & xPartner = myself & rating = norating
    repeat: 
        get1: {rating != h & rating != SRT & SPB} GET@(true)(CID := myself, CD := demand)[rating := SRT, xPartner := SP, xBot := SPB]
        +
        (
            get2: {xBot & rating != h & rating != SRT & !SPB} GET@(true)(CID := myself, CD := demand)[rating := SRT, xPartner := SP, xBot := SPB];
            get3: {true} GET@(xPartner)()[xBot := true]
        )

agent Server
    local: partner: location, pBot: bool, demand: ratingEnum, rating: ratingEnum
    init: pBot & demand = norating
    repeat:
        supply1: {pBot} SUPPLY@(any)(SRT := rating, SP := myself, SPB := false)[partner := CID, pBot := false, demand := CD]
        +
        supply2: {!pBot & demand != CD & demand != l} SUPPLY@(any)(SRT := rating, SP := myself, SPB := false)[partner := CID, pBot := false, demand := CD]
        +
        supply3: {true} SUPPLY@(myself)()[demand := norating, pBot := true]

system = Client(c1, demand=h) || Server (s1, rating=h)


SPEC forall k : Client . (k-xBot) -> G [[ getter == k & p2p ]] F (!k-xBot)
SPEC forall k : Client . F G ((k-xBot -> X !k-xBot) & ((X k-xBot) -> k-xBot)) 
SPEC forall j : Server . F G ((j-pBot -> X !j-pBot) & ((X j-pBot) -> j-pBot)) 
