channels: c, empty, g1, g2,vmm1,vmm2,vmm
enum rolevals {clnt, vm, mgr}
enum msgvals {reserve, request, release, buy, connect, full}
message-structure: MSG : msgvals, LNK : channels
property-variables: cv : rolevals
guard g(r : rolevals, ch : channels, m : channels) := (chan == *) & (@cv == r) | (chan == ch) & (@cv == mgr) | (chan == m) ;

agent Client
    local: role : rolevals, cLink : channels, mLink : channels, b: location
    init: cLink == c & mLink == empty & role==clnt
    relabel:
        cv <- role
    receive-guard: (chan == *) | (chan == cLink)

    repeat: (
            {true} GET@(b) []
            +
            {true} SUPPLY@(ANY)() []
            +
            (sReserve: {cLink==c} *! g(role,cLink,mLink)(MSG := reserve)[cLink := c]
            +
            rReserve: {cLink==c & MSG == reserve} *? [cLink := empty]
            )
            ;

            (sRequest: {cLink!=empty} cLink! g(role,cLink,mLink)(MSG := request)[cLink := c];
             rConnect: {mLink==empty & MSG == connect} cLink? [mLink := LNK];
             sRelease: {true} *! g(role,cLink,mLink)(MSG := release)[cLink := empty];
             sBuy: {mLink!=empty} mLink! g(role,cLink,mLink)(MSG := buy)[mLink := empty]

            +
             rRelease: {cLink==empty & MSG == release} *? [cLink := c]
            )
            )

agent Manager
    local: role : rolevals, cLink : channels, sLink : channels, fLink : channels
    init: fLink == g1 & sLink == g2 & cLink == c & role==mgr
    relabel:
        cv <- role
    receive-guard: (chan == *) | (chan == cLink) | (chan == fLink)

    repeat: (
            rRequest: {MSG == request} cLink? [];
            sForward: {true} fLink! (true)(MSG := request)[];
            (
             rep (rFull: {MSG == full} fLink? [];
                  sRequest: {true} sLink! (true)(MSG := request)[]
                 )
             +
             rConnect: {MSG == connect} cLink? []
            )
            )

agent Machine
    local: gLink : channels, pLink : channels, cLink : channels, asgn : bool
    init: !asgn & (cLink == empty)
    relabel:
        cv <- vm
    receive-guard: (chan == *) |(chan == gLink) & !asgn | (chan == pLink) | (chan == cLink)

    repeat: (
           rForward: {cLink==empty & MSG == request} gLink? [cLink:= c];
            (
             sConnect: {cLink==c & !asgn} cLink! (true)(MSG := connect, LNK := pLink)[cLink:= empty, asgn:= true]
             +
             sFull: {cLink==c & asgn} gLink! (true)(MSG := full)[cLink:= empty, asgn:= true]
             +
             rConnect: {cLink==c & MSG == connect} cLink? [cLink:= empty]


             +
             rFull: {cLink==c & asgn & MSG == full} gLink? [cLink:= empty, asgn:= true]
            )
            +
            rBuy: {MSG == buy} pLink? []
            )

system = Client(client,true) || Client(client2,true) || Manager(manager,true) || Machine(machine,gLink==g1 & pLink==vmm) || Machine(machine2,gLink==g1 & pLink==vmm2)

SPEC F client-mLink=vmm;
SPEC F client-sBuy;
SPEC G (!machine-sFull);
SPEC F machine-asgn;
SPEC G (client-sReserve -> X client-sRequest);
SPEC G (client-sReserve -> F client-sRelease);
SPEC G (client-sRequest -> F client-rConnect);
SPEC G (manager-sForward -> X machine-rForward);
SPEC G ((!machine-asgn & machine-rForward) -> machine-sConnect);
SPEC G (client-sRelease -> F (!client-rConnect));
SPEC G (client-automaton-state=4 -> !client-rConnect);
SPEC F (client-sRelease -> G(!client-rConnect));