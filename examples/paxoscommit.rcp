enum channel {c, a}
enum participantState {start, prepared, working, committed, failed, aborted}
enum task {commit, prepare, abort}
message-structure: TASK: task
property-variables: ready: bool
agent Coordinator
    local: finished : bool
    init: !finished
    receive-guard: chan == a
    repeat: 
        tellToPrepare: {!finished} c! (true)(TASK := prepare)[];
        (
         commandCommit: {true} c! (@ready)(TASK := commit)[finished := true]
           +
         (waitForAbort: {true} a? [];
           tellAllToAbort: {true} *! (true)(TASK := abort)[finished := true]
         )
        )
agent Participant
    local: state : participantState
    init: state == start
    relabel:
       ready <- state == prepared
    receive-guard: chan == c
    repeat:
         waitForPrepare: {state == start & TASK == prepare} c? [state := working];
          ((sendPrepared: {true} *! (true)()[state := prepared];
             (waitForCommit: {TASK == commit} c? [state := committed]
             +
             waitForAbort1: {TASK == abort} *? [state := aborted])
            )
          +
          fail: {true} a! (true)()[state := failed]
          +
          waitForAbort2: {TASK == abort} *? [state := aborted]
	)
        
system = Coordinator(coordinator, true) || Participant(participant1, true) || Participant(participant2, true)

SPEC F G (coordinator-finished)
SPEC forall p : Participant . G ([[chan == a]] (F (p-state == aborted | p-state == failed)))
SPEC exists p1 : Participant . exists p2 : Participant . F ( p1-state == committed ) & F ( p2-state != committed )
SPEC forall p1 : Participant . forall p2 : Participant . !(F ( p1-state == committed ) & F ( p2-state != committed ))